/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const app = express();
app.use(express.json());
//here is an array or list of items
let users = [{
    name: 'John',
    kidneys: [{
        healthy: true
    }, {
        healthy: true
    }]
}]

//get-check how many kidneys are there and their health
app.get('/', function (req, res) {
    // let kidneys_number = users[0].kidneys.length;
    // let healthy_kidneys = 0;
    // for (let user of users) {
    //     for (let kidney of user.kidneys) {
    //         if (kidney.healthy) {
    //             healthy_kidneys++;
    //         }
    //     }
    // }
    // res.send(`you have ${kidneys_number} kidneys with you out of which ${healthy_kidneys} are healthy`);
    let john_kidneys = users[0].kidneys;
    let total_kidneys = john_kidneys.length;
    let healthy_kidneys = 0;

    for (let kidney of john_kidneys) {
        if (kidney.healthy) {
            healthy_kidneys++;
        }
    }
    
    res.json({
        total_kidneys,
        healthy_kidneys
    })
});

//post - add a new kidney
app.post('/', function (req, res) {
    const isHealthy = req.body.isHealthy;
    users[0].kidneys.push({
        healthy: isHealthy
    });
    res.json({
        msg: "Done"
    });
});

//put - replace all kidneys, make them healthy
app.put('/', function (req, res) {
    for (let i = 0; i < users[0].kidneys.length; i++){
        users[0].kidneys[i].healthy = true;
    }
    res.send("Kidneys updated");
});

//delete - remove all the unhealthy kidneys
app.delete('/', function (req, res) {

    //what if there are no unhealthy kidneys
    let unhealthy_kidneys_count = 0;
    for (i = 0; i < users[0].kidneys.length; i++)
    {
        if (!users[0].kidneys[i].healthy) {
            unhealthy_kidneys_count++;
        }

    }

    if (unhealthy_kidneys_count == 0) {
        res.sendStatus(411);
    }
    else {
        let healthy_kidneys_count = 0;
    for (i = 0; i < users[0].kidneys.length; i++)
    {
        if (users[0].kidneys[i].healthy) {
            healthy_kidneys_count++;
        }

    }
    users[0].kidneys.length = 0;
    for (i = 0; i < healthy_kidneys_count; i++){
        users[0].kidneys.push({
            healthy: true
        });
    }
    res.send("You have all the bad kidneys removed");
    }
});



app.listen(3000);