/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const app = express();

//reader helper function:
function reader() {
  return new Promise((resolve, reject) => {
    fs.readFile("./todos.json", "utf-8", (err, data) => {
      if (err) {
        console.log(err);
      } else {
        // console.log("from the reader ",data);
        if(data.length>0)
          resolve(JSON.parse(data));
        else {
          resolve([]);
        }
      }
    });
  });
}
//writer helper function
function writer(data) {
  return new Promise((resolve, reject) => {
    fs.writeFile('./todos.json', JSON.stringify(data, null, 2), 'utf-8', (err) => {
      if (err) {
        reject(err);
      }
      else {
        resolve();
      }
    });
  })
}

app.use(bodyParser.json());

let counter = 0;

// 1.GET /todos - Retrieve all todo items
app.get("/todos", async (req, res) => {
  try {
    const data = await reader();

    if (Array.isArray(data) && data.length > 0) {
      res.status(200).json(data);
    } else {
      res.status(200).json([]);
    }
  } catch (error) {
    console.error(error);
    res.status(500).send("Internal Server Error");
  }
});

// 2.GET /todos/:id - Retrieve a specific todo item by ID
app.get("/todos/:id", async function (req, res) {
  const id = parseInt(req.params.id);
  const fileData = await reader();
  const indexToAccess = fileData.findIndex((todo) => todo.id == id);
  if (indexToAccess !== -1) {
    res.status(200).json(fileData[indexToAccess]);
    return;
  }
  res.sendStatus(404);
});

// 3. POST /todos - Create a new todo item
app.post("/todos", async (req, res) => {
  const title = req.body.title;
  const completed = req.body.completed;
  const description = req.body.description;

  let obj = {
    id: ++counter,
    title: title,
    description: description,
    completed: completed,
  };
  let fileData = await reader();
  fileData.push(obj);
  await writer(fileData);
  res.status(201).json({
    id: obj.id,
  });

});

// 4. PUT /todos/:id - Update an existing todo item by ID
app.put("/todos/:id", async function (req, res) {
  const title = req.body.title;
  const completed = req.body.completed;
  const id = req.params.id;

  let fileData = await reader();

  const indexToChange = fileData.findIndex((todo) => todo.id == id);

  if (indexToChange !== -1) {
    fileData[indexToChange].completed = completed;
    fileData[indexToChange].title = title;
    res.json(fileData[indexToChange]);
    await writer(fileData);
    return;
  }
  res.sendStatus(404);
});

// 5. DELETE /todos/:id - Delete a todo item by ID
app.delete("/todos/:id", async function (req, res) {
  const id = req.params.id;
  let fileData = await reader();
  const indexToRemove = fileData.findIndex((todo) => todo.id == id);
  if (indexToRemove != -1) {
    fileData.splice(indexToRemove, 1);
    await writer(fileData);
    res.sendStatus(200);
    // res.sendStatus(200).json(fileData);
    return;
  }
  res.sendStatus(404);
});

// For any other route not defined in the server return 404
app.use("*", function (req, res) {
  res.status(404).send("Route not defined");
});

// app.listen(3000);
module.exports = app;
